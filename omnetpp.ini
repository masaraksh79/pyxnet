[General]
network = Pyxis
debug-on-errors = true
record-eventlog = true
num-rngs=3
sim-time-limit = 90s

# one mini-slot assumption
# ____/-------------\_____
#  rx-tx               tx-rx
#              46b
#  400us                400us
#      ------2.5ms----
# assume 4 header bytes (46-4=42)
# 50B > added ~8 bytes of data for transmission is consecutive slots (inaccurate because has to exclude last slot)

# a raw rate of 38.2kbps which is 19.1 bit/ms for 2-GFSK amd 38.2 bit/ms for 4-GFSK
# for 4-GFSK system a slot of 5ms is contains 382 bits or 24 bytes.
# Phy header is 8 bit preamble and 32 bits sync -> 40 b or 5 bytes, leaving 19 bytes per 5ms
# If we were to transmit an extension of 1 packet by another one then
# ____/--------\____/---------\______
#       PPPDDDDDDDDDDD
# We gain 1ms of tx-rx switch-over (4 bytes) and 5 ms for data (24 bytes) - extra 28 bytes~
# Total single packet payload size: 19B Double: 19+28=47B Triple: 19+28*2=75, etc.
# Next simulation assumes 4-GFSK radios
Pyxis.numHosts = 120#${20..120 step 20}
Pyxis.slotTime = 5ms        # mini-slot size
Pyxis.txRx = 1ms			   # tx-rx switching time
Pyxis.slotBytes = 28	       # see picture above
Pyxis.firstSlotBytes = 15   # not sure if this is enough for control (19-2(hdr)-2(chksum)=15)	   

# Number of cycle slots is initially equals to ARSInitial and can go up to cycleSlots
# Without data every AR the BCS is transmitted and everything is access.
# If data is issued the data cycle grows until it reaches cycleSlots and then starts to cut allocations
Pyxis.cycleSlots = 100	 		# maximum possible number of slots in cycle
Pyxis.backOff = ${0,1} 			# 0 - harmonic backoff, 1 - increase slot, 2 - don't use (undefined)

# In addition to harmonic backoff the cycle size increases by 1 every time the 
# number of slots with collision goes above half. It can go up to ARSmax at most
Pyxis.server.BCSlot = 2           	    # Base slot duration in minislot (min=1)
Pyxis.server.ARSmax = 50            # maximum size of Access Requests slots
Pyxis.server.ARSmin = ${5,10,15,20,25} 	   		    # minimal size of Access Requests slots
Pyxis.server.maxPGBK = 5			# max number of cycles to piggyback data (from 0, on 20u improved bw from 5-15%)	

Pyxis.host[*].radioDelay = 1us
Pyxis.host[*].randomStart = 1 	# within N mini-slots

# SCADA Scenarios
# Each remote is being polled every 15s 

[Config PyxisPureScadaTest]
Pyxis.numHosts = 10
description = "Pyxis Test Scenario"
Pyxis.server.iaTime = uniform(0.03s,0.04s) # for 50 nodes, it is 0.3s per node of poll packet
Pyxis.server.dataLen = 86 # SCADA Master Poll
Pyxis.host[*].iaTime = uniform(7s,8s) # 
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)

[Config PyxisPureScada50]
Pyxis.numHosts = 50
description = "Pyxis 50 nodes, scada only"
Pyxis.server.iaTime = uniform(0.2s,0.4s) # for 50 nodes, it is 0.3s per node of poll packet
Pyxis.server.dataLen = 86 # SCADA Master Poll
Pyxis.host[*].iaTime = uniform(10s,20s) # 15s +- 10s variance
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisPureScada60]
Pyxis.numHosts = 60
description = "Pyxis 60 nodes , scada only"
Pyxis.server.iaTime = uniform(0.2s,0.3s) # it is 0.25s per node of poll packet
Pyxis.server.dataLen = 86 # SCADA Master Poll
Pyxis.host[*].iaTime = uniform(10s,20s) # 15s +- 10s variance
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisPureScada70]
Pyxis.numHosts = 70
description = "Pyxis 70 nodes , scada only"
Pyxis.server.iaTime = uniform(0.114s,0.314s) #  it is 0.214s per node of poll packet
Pyxis.server.dataLen = 86 # SCADA Master Poll
Pyxis.host[*].iaTime = uniform(10s,20s) # 15s +- 10s variance
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisPureScada80]
Pyxis.numHosts = 80
description = "Pyxis 80 nodes , scada only"
Pyxis.server.iaTime = uniform(0.0875s,0.2875s) # it is 0.1875s per node of poll packet
Pyxis.server.dataLen = 86 # SCADA Master Poll
Pyxis.host[*].iaTime = uniform(10s,20s) # 15s +- 10s variance
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisPureScada90]
Pyxis.numHosts = 90
description = "Pyxis 90 nodes , scada only"
Pyxis.server.iaTime = uniform(0.0667s,0.2667s) #  it is 0.1667s per node of poll packet
Pyxis.server.dataLen = 86 # SCADA Master Poll
Pyxis.host[*].iaTime = uniform(10s,20s) # 15s +- 10s variance
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisPureScada100]
Pyxis.numHosts = 100
description = "Pyxis 100 nodes , scada only"
Pyxis.server.iaTime = uniform(0.05s,0.25s) #  it is 0.15s per node of poll packet
Pyxis.server.dataLen = 86 # SCADA Master Poll
Pyxis.host[*].iaTime = uniform(10s,20s) # 15s +- 10s variance
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisPureScada110]
Pyxis.numHosts = 110
description = "Pyxis 110 nodes , scada only"
Pyxis.server.iaTime = uniform(0.036s,0.236s) #  it is 0.136s per node of poll packet
Pyxis.server.dataLen = 86 # SCADA Master Poll
Pyxis.host[*].iaTime = uniform(10s,20s) # 15s +- 10s variance
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisPureScada120]
Pyxis.numHosts = 120
description = "Pyxis 120 nodes, scada only"
Pyxis.server.iaTime = uniform(0.025s,0.225s) # for 120 nodes, it is 0.125s per node of poll packet
Pyxis.server.dataLen = 86 # SCADA Master Poll
Pyxis.host[*].iaTime = uniform(10s,20s) # 15s +- 10s variance
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

# Traffic test measuring margin of additional traffic on more realistic scenarios
# in terms of nodes number (25-50) with 25 30 35 40 45 50
# Still looking into efficiency of RA methods and different AR Slots sizes
# In scenarios marked as M0 no additional traffic is issued (still like the SCADA only ones)
# In M1 we issue 10% more uplink and downlink traffic
# In M2 we issue 30% more uplink and downlink traffic
# In M3 we issue 50% more uplink and downlink traffic

[Config PyxisTraffic25M0]
Pyxis.numHosts = 25
description = "Pyxis 25 nodes, scada and other traffic (only Scada)"
Pyxis.server.iaTime = uniform(0.55s,0.65s) # for 25 nodes, it is 0.6s per node of poll packet
Pyxis.server.dataLen = 86 # SCADA Master Poll
Pyxis.host[*].iaTime = uniform(10s,20s) # 15s +- 10s variance
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic25M1]
Pyxis.numHosts = 25
description = "Pyxis 25 nodes, scada and 10% other traffic"
Pyxis.server.iaTime = uniform(0.55s,0.65s) # for 25 nodes, it is 0.6s per node of poll packet
Pyxis.server.dataLen = 95 # SCADA + 10%
Pyxis.host[*].iaTime = uniform(8.625s,18.625s) # with 10% increase the time is simulated as 13.625s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic25M2]
Pyxis.numHosts = 25
description = "Pyxis 25 nodes, scada and 30% other traffic"
Pyxis.server.iaTime = uniform(0.55s,0.65s) # for 25 nodes, it is 0.6s per node of poll packet
Pyxis.server.dataLen = 112 # SCADA + 30%
Pyxis.host[*].iaTime = uniform(6.525s,16.525s) # with 30% increase the time is simulated as 11.525s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic25M3]
Pyxis.numHosts = 25
description = "Pyxis 25 nodes, scada and 50% other traffic"
Pyxis.server.iaTime = uniform(0.55s,0.65s) # for 25 nodes, it is 0.6s per node of poll packet
Pyxis.server.dataLen = 129 # SCADA + 50%
Pyxis.host[*].iaTime = uniform(5s,15s) # with 50% increase the time is simulated as 10s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic25M4]
Pyxis.numHosts = 25
description = "Pyxis 25 nodes, scada and +100% traffic"
Pyxis.server.iaTime = uniform(0.55s,0.65s) # for 25 nodes, it is 0.6s per node of poll packet
Pyxis.server.dataLen = 156 # SCADA + 50%
Pyxis.host[*].iaTime = uniform(3.36s,11.36s) # with 100% increase the time is simulated as 7.36s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

#######################################
# 30 nodes
#######################################
[Config PyxisTraffic30M0]
Pyxis.numHosts = 30
description = "Pyxis 30 nodes, scada and other traffic (only Scada)"
Pyxis.server.iaTime = uniform(0.45s,0.55s) # for 30 nodes, it is 0.5s per node of poll packet
Pyxis.server.dataLen = 86 # SCADA Master Poll
Pyxis.host[*].iaTime = uniform(10s,20s) # 15s +- 10s variance
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic30M1]
Pyxis.numHosts = 30
description = "Pyxis 30 nodes, scada and 10% other traffic"
Pyxis.server.iaTime = uniform(0.45s,0.55s) # for 30 nodes, it is 0.5s per node of poll packet
Pyxis.server.dataLen = 95 # SCADA + 10%
Pyxis.host[*].iaTime = uniform(8.625s,18.625s) # with 10% increase the time is simulated as 13.625s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic30M2]
Pyxis.numHosts = 30
description = "Pyxis 30 nodes, scada and 30% other traffic"
Pyxis.server.iaTime = uniform(0.45s,0.55s) # for 30 nodes, it is 0.5s per node of poll packet
Pyxis.server.dataLen = 112 # SCADA + 30%
Pyxis.host[*].iaTime = uniform(6.525s,16.525s) # with 30% increase the time is simulated as 11.525s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic30M3]
Pyxis.numHosts = 30
description = "Pyxis 30 nodes, scada and 50% other traffic"
Pyxis.server.iaTime = uniform(0.45s,0.55s) # for 30 nodes, it is 0.5s per node of poll packet
Pyxis.server.dataLen = 129 # SCADA + 50%
Pyxis.host[*].iaTime = uniform(5s,15s) # with 50% increase the time is simulated as 10s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic30M4]
Pyxis.numHosts = 30
description = "Pyxis 30 nodes, scada and +100% traffic"
Pyxis.server.iaTime = uniform(0.45s,0.55s) # for 30 nodes, it is 0.5s per node of poll packet
Pyxis.server.dataLen = 156 # SCADA + 50%
Pyxis.host[*].iaTime = uniform(3.36s,11.36s) # with 100% increase the time is simulated as 7.36s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

#######################################
# 35 nodes
#######################################
[Config PyxisTraffic35M0]
Pyxis.numHosts = 35
description = "Pyxis 35 nodes, scada and other traffic (only Scada)"
Pyxis.server.iaTime = uniform(0.325s,0.525s) # for 35 nodes, it is 0.425s per node of poll packet
Pyxis.server.dataLen = 86 # SCADA Master Poll
Pyxis.host[*].iaTime = uniform(10s,20s) # 15s +- 10s variance
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic35M1]
Pyxis.numHosts = 35
description = "Pyxis 35 nodes, scada and 10% other traffic"
Pyxis.server.iaTime = uniform(0.325s,0.525s) # for 35 nodes, it is 0.425s per node of poll packet
Pyxis.server.dataLen = 95 # SCADA + 10%
Pyxis.host[*].iaTime = uniform(8.625s,18.625s) # with 10% increase the time is simulated as 13.625s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic35M2]
Pyxis.numHosts = 35
description = "Pyxis 35 nodes, scada and 30% other traffic"
Pyxis.server.iaTime = uniform(0.325s,0.525s) # for 35 nodes, it is 0.425s per node of poll packet
Pyxis.server.dataLen = 112 # SCADA + 30%
Pyxis.host[*].iaTime = uniform(6.525s,16.525s) # with 30% increase the time is simulated as 11.525s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic35M3]
Pyxis.numHosts = 35
description = "Pyxis 35 nodes, scada and 50% other traffic"
Pyxis.server.iaTime = uniform(0.325s,0.525s) # for 35 nodes, it is 0.425s per node of poll packet
Pyxis.server.dataLen = 129 # SCADA + 50%
Pyxis.host[*].iaTime = uniform(5s,15s) # with 50% increase the time is simulated as 10s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic35M4]
Pyxis.numHosts = 35
description = "Pyxis 35 nodes, scada and +100% traffic"
Pyxis.server.iaTime = uniform(0.325s,0.525s) # for 35 nodes, it is 0.425s per node of poll packet
Pyxis.server.dataLen = 156 # SCADA + 50%
Pyxis.host[*].iaTime = uniform(3.36s,11.36s) # with 100% increase the time is simulated as 7.36s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

#######################################
# 40 nodes
#######################################
[Config PyxisTraffic40M0]
Pyxis.numHosts = 40
description = "Pyxis 40 nodes, scada and other traffic (only Scada)"
Pyxis.server.iaTime = uniform(0.275s,0.475s) # for 40 nodes, it is 0.375s per node of poll packet
Pyxis.server.dataLen = 86 # SCADA Master Poll
Pyxis.host[*].iaTime = uniform(10s,20s) # 15s +- 10s variance
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic40M1]
Pyxis.numHosts = 40
description = "Pyxis 40 nodes, scada and other traffic (only Scada)"
Pyxis.server.iaTime = uniform(0.275s,0.475s) # for 40 nodes, it is 0.375s per node of poll packet
Pyxis.server.dataLen = 95 # SCADA + 10%
Pyxis.host[*].iaTime = uniform(8.625s,18.625s) # with 10% increase the time is simulated as 13.625s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic40M2]
Pyxis.numHosts = 40
description = "Pyxis 40 nodes, scada and other traffic (only Scada)"
Pyxis.server.iaTime = uniform(0.275s,0.475s) # for 40 nodes, it is 0.375s per node of poll packet
Pyxis.server.dataLen = 112 # SCADA + 30%
Pyxis.host[*].iaTime = uniform(6.525s,16.525s) # with 30% increase the time is simulated as 11.525s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic40M3]
Pyxis.numHosts = 40
description = "Pyxis 40 nodes, scada and other traffic (only Scada)"
Pyxis.server.iaTime = uniform(0.275s,0.475s) # for 40 nodes, it is 0.375s per node of poll packet
Pyxis.server.dataLen = 129 # SCADA + 50%
Pyxis.host[*].iaTime = uniform(5s,15s) # with 50% increase the time is simulated as 10s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic40M4]
Pyxis.numHosts = 40
description = "Pyxis 40 nodes, scada and +100% traffic"
Pyxis.server.iaTime = uniform(0.275s,0.475s) # for 40 nodes, it is 0.375s per node of poll packet
Pyxis.server.dataLen = 156 # SCADA + 50%
Pyxis.host[*].iaTime = uniform(3.36s,11.36s) # with 100% increase the time is simulated as 7.36s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

#######################################
# 45 nodes
#######################################
[Config PyxisTraffic45M0]
Pyxis.numHosts = 45
description = "Pyxis 45 nodes, scada and other traffic (only Scada)"
Pyxis.server.iaTime = uniform(0.233s,0.433s) # for 45 nodes, it is 0.333s per node of poll packet
Pyxis.server.dataLen = 86 # SCADA Master Poll
Pyxis.host[*].iaTime = uniform(10s,20s) # 15s +- 10s variance
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic45M1]
Pyxis.numHosts = 45
description = "Pyxis 45 nodes, scada and other traffic (only Scada)"
Pyxis.server.iaTime = uniform(0.233s,0.433s) # for 45 nodes, it is 0.333s per node of poll packet
Pyxis.server.dataLen = 95 # SCADA + 10%
Pyxis.host[*].iaTime = uniform(8.625s,18.625s) # with 10% increase the time is simulated as 13.625s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic45M2]
Pyxis.numHosts = 45
description = "Pyxis 45 nodes, scada and other traffic (only Scada)"
Pyxis.server.iaTime = uniform(0.233s,0.433s) # for 45 nodes, it is 0.333s per node of poll packet
Pyxis.server.dataLen = 112 # SCADA + 30%
Pyxis.host[*].iaTime = uniform(6.525s,16.525s) # with 30% increase the time is simulated as 11.525s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic45M3]
Pyxis.numHosts = 45
description = "Pyxis 45 nodes, scada and other traffic (only Scada)"
Pyxis.server.iaTime = uniform(0.233s,0.433s) # for 45 nodes, it is 0.333s per node of poll packet
Pyxis.server.dataLen = 129 # SCADA + 50%
Pyxis.host[*].iaTime = uniform(5s,15s) # with 50% increase the time is simulated as 10s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic45M4]
Pyxis.numHosts = 45
description = "Pyxis 45 nodes, scada and +100% traffic"
Pyxis.server.iaTime = uniform(0.233s,0.433s) # for 45 nodes, it is 0.333s per node of poll packet
Pyxis.server.dataLen = 156 # SCADA + 50%
Pyxis.host[*].iaTime = uniform(3.36s,11.36s) # with 100% increase the time is simulated as 7.36s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

#######################################
# 50 nodes
#######################################
[Config PyxisTraffic50M0]
Pyxis.numHosts = 50
description = "Pyxis 50 nodes, scada and other traffic (only Scada)"
Pyxis.server.iaTime = uniform(0.2s,0.4s) # for 50 nodes, it is 0.3s per node of poll packet
Pyxis.server.dataLen = 86 # SCADA Master Poll
Pyxis.host[*].iaTime = uniform(10s,20s) # 15s +- 10s variance
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic50M1]
Pyxis.numHosts = 50
description = "Pyxis 50 nodes, scada and +10% traffic"
Pyxis.server.iaTime = uniform(0.2s,0.4s) # for 50 nodes, it is 0.3s per node of poll packet
Pyxis.server.dataLen = 95 # SCADA + 10%
Pyxis.host[*].iaTime = uniform(8.625s,18.625s) # with 10% increase the time is simulated as 13.625s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic50M2]
Pyxis.numHosts = 50
description = "Pyxis 50 nodes, scada and +30% traffic"
Pyxis.server.iaTime = uniform(0.2s,0.4s) # for 50 nodes, it is 0.3s per node of poll packet
Pyxis.server.dataLen = 112 # SCADA + 30%
Pyxis.host[*].iaTime = uniform(6.525s,16.525s) # with 30% increase the time is simulated as 11.525s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic50M3]
Pyxis.numHosts = 50
description = "Pyxis 50 nodes, scada and +50% traffic"
Pyxis.server.iaTime = uniform(0.2s,0.4s) # for 50 nodes, it is 0.3s per node of poll packet
Pyxis.server.dataLen = 129 # SCADA + 50%
Pyxis.host[*].iaTime = uniform(5s,15s) # with 50% increase the time is simulated as 10s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic50M4]
Pyxis.numHosts = 50
description = "Pyxis 50 nodes, scada and +100% traffic"
Pyxis.server.iaTime = uniform(0.2s,0.4s) # for 50 nodes, it is 0.3s per node of poll packet
Pyxis.server.dataLen = 156 # SCADA + 50%
Pyxis.host[*].iaTime = uniform(3.36s,11.36s) # with 100% increase the time is simulated as 7.36s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

#######################################
# 55 nodes
#######################################
[Config PyxisTraffic55M0]
Pyxis.numHosts = 55
description = "Pyxis 55 nodes, scada and other traffic (only Scada)"
Pyxis.server.iaTime = uniform(0.172s,0.372s) # for 55 nodes, it is 0.272s per node of poll packet
Pyxis.server.dataLen = 86 # SCADA Master Poll
Pyxis.host[*].iaTime = uniform(10s,20s) # 15s +- 10s variance
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic55M1]
Pyxis.numHosts = 55
description = "Pyxis 55 nodes, scada and +10% traffic"
Pyxis.server.iaTime = uniform(0.172s,0.372s) # for 55 nodes, it is 0.272s per node of poll packet
Pyxis.server.dataLen = 95 # SCADA + 10%
Pyxis.host[*].iaTime = uniform(8.625s,18.625s) # with 10% increase the time is simulated as 13.625s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic55M2]
Pyxis.numHosts = 55
description = "Pyxis 55 nodes, scada and +30% traffic"
Pyxis.server.iaTime = uniform(0.172s,0.372s) # for 55 nodes, it is 0.272s per node of poll packet
Pyxis.server.dataLen = 112 # SCADA + 30%
Pyxis.host[*].iaTime = uniform(6.525s,16.525s) # with 30% increase the time is simulated as 11.525s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic55M3]
Pyxis.numHosts = 55
description = "Pyxis 55 nodes, scada and +50% traffic"
Pyxis.server.iaTime = uniform(0.172s,0.372s) # for 55 nodes, it is 0.272s per node of poll packet
Pyxis.server.dataLen = 129 # SCADA + 50%
Pyxis.host[*].iaTime = uniform(5s,15s) # with 50% increase the time is simulated as 10s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}

[Config PyxisTraffic55M4]
Pyxis.numHosts = 55
description = "Pyxis 55 nodes, scada and +100% traffic"
Pyxis.server.iaTime = uniform(0.172s,0.372s) # for 55 nodes, it is 0.272s per node of poll packet
Pyxis.server.dataLen = 156 # SCADA + 50%
Pyxis.host[*].iaTime = uniform(3.36s,11.36s) # with 100% increase the time is simulated as 7.36s with same payload size
Pyxis.host[*].dataLen = 456	# in bytes (392 + 64)
seed-set=${1..50}