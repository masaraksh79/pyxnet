[General]
network = Pyxis
debug-on-errors = true
record-eventlog = true
num-rngs=3
sim-time-limit = 30s

# one mini-slot assumption
# ____/-------------\_____
#  rx-tx               tx-rx
#              46b
#  400us                400us
#      ------2.5ms----
# assume 4 header bytes (46-4=42)
# 50B > added ~8 bytes of data for transmission is consecutive slots (inaccurate because has to exclude last slot)

# a raw rate of 38.2kbps which is 19.1 bit/ms for 2-GFSK amd 38.2 bit/ms for 4-GFSK
# for 4-GFSK system a slot of 5ms is contains 382 bits or 24 bytes.
# Phy header is 8 bit preamble and 32 bits sync -> 40 b or 5 bytes, leaving 19 bytes per 5ms
# If we were to transmit an extension of 1 packet by another one then
# ____/--------\____/---------\______
#       PPPDDDDDDDDDDD
# We gain 1ms of tx-rx switch-over (4 bytes) and 5 ms for data (24 bytes) - extra 28 bytes~
# Total single packet payload size: 19B Double: 19+28=47B Triple: 19+28*2=75, etc.
# Next simulation assumes 4-GFSK radios
Pyxis.numHosts = ${10..20 step 1}
Pyxis.slotTime = 5ms    # mini-slot size
Pyxis.txRate = 38.2kbps
Pyxis.slotBytes = 28	       # see picture above
Pyxis.firstSlotBytes = 15   # not sure if this is enough for control (19-2(hdr)-2(chksum)=15)	   
Pyxis.BCSlot = 3           	   # Base slot duration in minislot (min=1)

# Number of cycle slots is initially equals to ARSInitial and can go up to cycleSlots
# Without data every AR the BCS is transmitted and everything is access.
# If data is issued the data cycle grows until it reaches cycleSlots and then starts to cut allocations
Pyxis.cycleSlots = 100	 		# maximum possible number of slots in cycle
Pyxis.backOff = 1  	     			# 0 - harmonic backoff, 1 - increase slot, 2 - mix

# In addition to harmonic backoff the cycle size increases by 1 every time the 
# number of slots with collision goes above half. It can go up to ARSmax at most
Pyxis.server.ARSmax = 20            # maximum size of Access Requests slots
Pyxis.server.ARSmin = 10 	   		    # minimal size of Access Requests slots
Pyxis.server.maxPGBK = 5			# max number of cycles to piggyback data (from 0, on 20u improved bw from 5-15%)	

Pyxis.host[*].radioDelay = 1us
Pyxis.host[*].randomStart = 1 	# within N mini-slots

[Config Pyxis1]
description = "slotted Pyxis, overloaded"
# slotTime = pkLen/txRate = 960/9600 = 0.1s
# too frequent transmissions result in high collision rate and low channel utilization
# The rates combines SCADA 255 bytes response every 1s, NTP+SNMP 10 bytes every 1s
Pyxis.host[*].iaTime = exponential(0.5s)#${exponential(0.3s),exponential(0.35s),exponential(0.4s), exponential(0.5s)}
Pyxis.host[*].dataLen = 127	# in bytes

[Config Pyxis2]
description = "slotted Pyxis, optimal load"
# slotTime = pkLen/txRate = 960/9600 = 0.1s
# near optimal load, channel utilization is near theoretical maximum 1/e
Pyxis.host[*].iaTime = exponential(5s)
Pyxis.host[*].dataLen = 350	# in bytes

[Config Pyxis3]
description = "slotted Pyxis, low traffic"
# slotTime = pkLen/txRate = 960/9600 = 0.1s
# very low traffic results in channel being idle most of the time
Pyxis.host[*].iaTime = exponential(20s)
Pyxis.host[*].dataLen = 350	# in bytes

